<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>cntrl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Game Controller
/* this object is placed in every room */
if room = rm_Menu
{
instance_create(x,y,obj_Menu_Control);
}
if room = rm_Start
{instance_create(x,y,obj_GameStart);}
if room = rm_StartMenu
{instance_create(x,y,obj_StartMenu);}
if room != rm_StartMenu
{
instance_create(x,y,obj_WallAdder);
instance_create(x,y,obj_GUI);
instance_create(x,y,obj_PlayerSpawn);
instance_create(x,y,obj_ViewHandler);
}
//Always initialized systems
instance_create(x,y,obj_Console); //initializes the game console manager
instance_create(x,y,obj_Chatter);    //initializes the game dialogue manager

//DEBUG
last_sec_update = current_second;
ShowHelp = 0;
depth = -room_height;
FPS = "ERROR";
//Tiles
animated_tile_init()
animated_tile_add(til_Fire_Level,0.05,til_Fire_Level_1,til_Fire_Level_2,til_Fire_Level_3,til_Fire_Level_4);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.Pause = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Debugging TEMPORARY!!
if mouse_check_button_pressed(mb_left) = 1
{scr_SpawnPU(0, mouse_x, mouse_y);}
if keyboard_check_pressed(vk_f1)
{
    game_restart();
}
//HELP MESSAGE
if keyboard_check_pressed(vk_f10)
{
    ShowHelp++
    ShowHelp = ShowHelp mod 2;
}
//DEBUG MODE
if keyboard_check_pressed(vk_f11)
{
    global.Debug++
    global.Debug = global.Debug mod 2;
}
//TILES
animated_tile_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="116">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !global.Pause
{
instance_create(x,y,obj_Pathfinder);
}
if room != rm_Menu
{
alarm[0] = 1;
}

//ALWAYS DOES
for(var i =0; i&lt;4;i++)
{
    gamepad_set_vibration(i, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_surface_ext(application_surface,global.Xoffset,global.Yoffset,1,1,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if obj_Console.console_open == 0
{
//HELP MESSAGE
draw_set_colour(c_red);
draw_set_font(fnt_Help);
draw_set_alpha(1);
if ShowHelp = 0
{
draw_text(10,13,'Press F10 for keybinding');
}
else if ShowHelp = 1
{

HelpFile = file_text_open_read(working_directory + "/KEYBINDING.txt")
var i = 0;
while !file_text_eof(HelpFile)
{
i ++
    draw_text(10,i*13,file_text_readln(HelpFile));
}
file_text_close(HelpFile);
}

//Debug mode
if global.Debug = 1
{
    ///Execute every second
if (last_sec_update != current_second) {
    last_sec_update = current_second;
    FPS = fps_real;
    }
    draw_text(window_get_width()-120,20,"fps: " + string(FPS));
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_Crosshair_Defualt,0,mouse_x,mouse_y,global.Scale,global.Scale,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//fullscreen
if !window_get_fullscreen()
{
window_set_fullscreen(true);
global.MonitorW=display_get_width();
global.MonitorH=display_get_height();
global.Xoffset=(global.MonitorW-640)/2;
global.Yoffset=(global.MonitorH-360)/2;
for (i=4; i&gt;1; i--)
{
if(global.MonitorW&gt;=640*i &amp;&amp; global.MonitorH&gt;=360*i)
then
{
surface_resize(application_surface,640*i,360*i)
global.Xoffset=(global.MonitorW-640*i)/2;
global.Yoffset=(global.MonitorH-360*i)/2;
global.Zoom = i;
exit;
}
}
}
else
{
window_set_fullscreen(false);
surface_resize(application_surface,640*2,360*2)
global.Xoffset = 2;
global.Yoffset = 2;
global.Zoom = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_Respawn();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
