<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_MetalWall_S</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale = 2;
image_yscale = 2;
depth = -(y+sprite_height+1);
image_alpha = 0.8;
Placeable = 0; // if the placer is in a legal position
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// sets the coordinates to match the cells of the grid ,
//2 cells from the player in the direction he is facing
if instance_exists(Target)
{

var dir = (Target).dir

var centerx = floor(Target.x/64);
var centery = floor(Target.y/64);
if Large = 1
{
sprite_index = asset_get_index("spr_MetalWall_" + string(dir))
switch Target.dir
    {
        case 0:
            x = (centerx - 1)*64;
            y = (centery + 2)*64;
            break;
        case 1:
            x = (centerx - 1)*64;
            y = (centery - 2)*64;
            break;
        case 2:
            x = (centerx + 2)*64;
            y = (centery - 1)*64;
            break;
        case 3:
            x = (centerx - 2)*64;
            y = (centery - 1)*64;
            
            break;
    }
}
else
{
switch Target.dir
    {
        case 0:
            x = (centerx)*64;
            y = (centery + 2)*64;
            break;
        case 1:
            x = (centerx)*64;
            y = (centery - 2)*64;
            break;
        case 2:
            x = (centerx + 2)*64;
            y = (centery)*64;
            break;
        case 3:
            x = (centerx - 2)*64;
            y = (centery)*64;
            
            break;
    }

}
}
else
{
instance_destroy();
}
if place_meeting(x,y,obj_solid) or place_meeting(x,y,obj_Player) or place_meeting(x,y,obj_Enemy) // if placer is in an illigal coordinate
{image_blend=make_colour_rgb(128,0,0);
Placeable = 0;}
else
{image_blend=make_colour_rgb(0,128,0); // if placer is in a free coordinate
Placeable = 1;}


depth = -(y+sprite_height+1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
