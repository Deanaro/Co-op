<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>cntrl</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = rm_Start
{
 scr_PlayerJoin();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/* at the moment this script does nothing. when its finished this code will pause the game when a controller disconnects*/


show_debug_message("Event = " + async_load[? "event_type"]);        // Debug cocde so you can see which event has been
show_debug_message("Pad = " + string(async_load[? "pad_index"]));   // triggered and the pad associated with it.

switch(async_load[? "event_type"])             // Parse the async_load map to see which event has been triggered
{
case "gamepad discovered":                     // A game pad has been discovered
    var pad = async_load[? "pad_index"];       // Get the pad index value from the async_load map
    if pad &lt; 4
    {
    var padSlot = scr_CheckForPad(pad); //check if pad exists, or next available player slot
    }
   
        
        
           
        
        
    break;
case "gamepad lost":                           // Gamepad has been removed or  disabled
    var pad = async_load[? "pad_index"];     // Get the pad index
    if pad &lt; 4     
    {       
    var PlayerSlot = scr_CheckForPad(pad)
    if PlayerSlot &lt;= 0 and PlayerSlot &gt;= -5
    {
    PlayerSlot = abs(PlayerSlot + 1)
    //destroy all assets of that player
    with global.Player[PlayerSlot,0]
    {instance_destroy();}
    global.Player[PlayerSlot,0] = noone;
    global.Player[PlayerSlot,1] = -1;
    }
    }
    /* Old destructor!
    if (instance_exists(global.Player[pad]))          // Check for a player instance and other instanses associated with the pad and remove it
        {
        with (global.Player[pad])
            {
            instance_destroy();
            }
        with (GUI[pad])
            {
            instance_destroy();
            }
        with (Wicon[pad])
            {
            instance_destroy();
            }
        global.Player[pad] = noone;                   // Set the controller array to "noone" so it detects a new pad being connected
        }
    break;
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// when moving a room recreates the player objects
if global.Pause = 0
{
    for (i = 0; i &lt;4; i++)
    {
    if global.Player[i,1] != -1
    {scr_SpawnPlayer(-2, global.x1,global.y1,global.x2,global.y2,i)}
    
    }
    
    //fixes view
    if instance_exists(obj_Player)
    {
    var view_x = 0;
    view_y = 0;
    var dev = 0; // the number of players
    for(var i=0;i&lt;4;i++)
    {
    if instance_exists(global.Player[i, 0])
        {
        dev += 1;
        view_x += global.Player[i,0].x;
        view_y += global.Player[i,0].y + obj_Player.sprite_height/2;
        }
    }
    // average locatioon of the players - half the view size (since the origin is at 0,0)
    view_xview = view_x/dev - view_wview/2; 
    view_yview = view_y/dev - view_hview/2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
