<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_PU0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale =global.Scale;
image_yscale = global.Scale;
depth = -(y+sprite_height+1);
image_alpha = 0;
alarm[0] = 1;
Placeable = 0; // if the placer is in a legal position
object = noone;
image_speed = 0;
x_shift = 0;
y_shift = 0;
square = 1;
x_Gshift=0;
y_Gshift=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha = 0.8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// sets the coordinates to match the cells of the grid ,
//2 cells from the player in the direction he is facing

if instance_exists(Target)
{
if Target.Busy = 0
{instance_destroy();}

switch Target.dir
{
    case 0: //down
        xshift = 0;
        yshift = 32;
        if !square {sprite_index = asset_get_index(string(sprite) + "_0");}
        break;
    case 1: //up
        xshift = 0;
        yshift = -32;
        if !square {sprite_index = asset_get_index(string(sprite) + "_1");}
        break;
    case 2: //right
        xshift = 32;
        yshift = 0;
        if !square {sprite_index = asset_get_index(string(sprite) + "_2");}
        break;
    case 3: //left
        xshift = -32;
        yshift = 0;
        if !square {sprite_index = asset_get_index(string(sprite) + "_3");}
        break;
}
xshift -= sprite_width/2;
yshift -= sprite_height/2 - 16;

x = Target.x + xshift;
y = Target.y + yshift;

/*
switch Target.dir
{
    case 0: //down
            xshift = 0 - sprite_width/2;
            yshift = 16;
                if !square
                {
                    sprite_index = asset_get_index(string(sprite) + "_0")
                    x_Gshift = floor(sprite_width/64)
                }
            break;
    case 1: //up
            xshift = 0 - sprite_width/2;
            yshift = -16;
                if !square
                {
                    sprite_index = asset_get_index(string(sprite) + "_1")
                    x_Gshift = floor(sprite_width/64)
                }
            break;
    case 2: //right
            xshift = 16;
            yshift = 0 - sprite_height/2;
                if !square
                {
                    sprite_index = asset_get_index(string(sprite) + "_2")
                    y_Gshift = floor(sprite_height/64)
                }
            break;
    case 3: //left
            xshift = -16;
            yshift = 0 - sprite_height/2;
                if !square
                {
                    sprite_index = asset_get_index(string(sprite) + "_3")
                    y_Gshift = floor(sprite_height/64)
                }
            break;  
}

var centerx = floor((Target.x+xshift)/32)+x_Gshift+x_shift;
var centery = floor((Target.Centery+yshift)/32)+y_Gshift+y_shift;

switch Target.dir
    {
        case 0: //down
            x = (centerx)*32;
            y = (centery+1)*32;
            break;
        case 1: //up
            x = (centerx)*32;
            y = (centery-1)*32;
            break;
        case 2: //right
            x = (centerx+1)*32;
            y = (centery)*32;
            break;
        case 3: //left
            x = (centerx-1)*32;
            y = (centery)*32;
            
            break;
    }
*/
}
else
{
instance_destroy();
}
if place_meeting(x,y,obj_solid) or place_meeting(x,y,obj_Player) or place_meeting(x,y,obj_Enemy) // if placer is in an illigal coordinate
{image_blend=make_colour_rgb(128,0,0);
Placeable = 0;}
else
{image_blend=make_colour_rgb(0,128,0); // if placer is in a free coordinate
Placeable = 1;}


depth = -(y+sprite_height+1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
