<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>cntrl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_P1_0</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
<<<<<<< HEAD
            <string>/* this object is placed in every room */ 
=======
            <string>///Initialize Game Controller
/* this object is placed in every room */
randomize() // without this gamemaker uses a defualt seed which grants the same results every time
instance_create(x,y,obj_Console); //initializes the game console manager
instance_create(x,y,obj_Chatter);    //initializes the game dialogue manager
instance_create(x,y,obj_bgdraw); 


/*
for (var i = 0; i &lt; 4; i++;)    // for when moving rooms!!!!
{
    GUI[i] = noone;     // array for GUI objects for Players 
    Wicon[i] = noone;   // array weapon icons
    if gamepad_is_connected(i) and global.Player[i, 0] = -1
    {scr_SpawnPlayer(i,0,0, global.view_width,global.view_height);}
}
*/ 


>>>>>>> origin/master
animated_tile_init();
animated_tile_add(til_Firelevel,0.02,
                    til_Firelevel_2,
                    til_Firelevel_3,
                    til_Firelevel_4,
                    til_Firelevel_5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Controller Game Logic
animated_tile_update();

if room = rm_Start // only allows playerrs to join in the Start room
{
scr_PlayerJoin(); 
}
// for testing
if mouse_check_button_pressed(mb_left) = 1
{scr_SpawnPU(0, mouse_x, mouse_y);}
<<<<<<< HEAD


scr_View();//View mover



// for testing ************
=======
/* for testing ************ USE CONSOLE
if keyboard_check_pressed(vk_space)
{
    scr_moveroom(rm_Test2)
} 
>>>>>>> origin/master
if keyboard_check_pressed(ord('P'))
{
    game_restart();
}
<<<<<<< HEAD
//testing ***************
=======
//testing *************** */

scr_View();//View mover
>>>>>>> origin/master
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Controller
/* this event triggers on connection and disconnection of gamepads and creates
 new player instances or deletes them when their corresponding controller has
 been removed / diabled. */


show_debug_message("Event = " + async_load[? "event_type"]);        // Debug cocde so you can see which event has been
show_debug_message("Pad = " + string(async_load[? "pad_index"]));   // triggered and the pad associated with it.

switch(async_load[? "event_type"])             // Parse the async_load map to see which event has been triggered
{
case "gamepad discovered":                     // A game pad has been discovered
    var pad = async_load[? "pad_index"];       // Get the pad index value from the async_load map
    if pad &lt; 4
    {
    var padSlot = scr_CheckForPad(pad); //check if pad exists, or next available player slot
    }
       
        
        
           
        
        
    break;
case "gamepad lost":                           // Gamepad has been removed or  disabled
    var pad = async_load[? "pad_index"];     // Get the pad index
    if pad &lt; 4     
    {       
    var PlayerSlot = scr_CheckForPad(pad)
    if PlayerSlot &lt;= 0 and PlayerSlot &gt;= -5
    {
    PlayerSlot = abs(PlayerSlot + 1)
    //destroy all assets of that player
    with global.Player[PlayerSlot,0]
    {instance_destroy();}
    global.Player[PlayerSlot,0] = noone;
    global.Player[PlayerSlot,1] = -1;
    }
    }
    /* Old destructor!
    if (instance_exists(global.Player[pad]))          // Check for a player instance and other instanses associated with the pad and remove it
        {
        with (global.Player[pad])
            {
            instance_destroy();
            }
        with (GUI[pad])
            {
            instance_destroy();
            }
        with (Wicon[pad])
            {
            instance_destroy();
            }
        global.Player[pad] = noone;                   // Set the controller array to "noone" so it detects a new pad being connected
        }
    break;
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x,y,obj_Console); //initializes the the game console manager

// when moving a room recreates the player objects
for (i = 0; i &lt;4; i++)
{
if global.Player[i,1] != -1
{scr_SpawnPlayer(-2, global.x1,global.y1,global.x2,global.y2,i)}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draws GUI
for (var i=0; i &lt; 4; i++)
    {
        if (instance_exists(global.Player[i, 0]))
        {
            var xpos = +(global.view_width/5)*(i+1) - 80;
            var bottom = global.view_height;
            draw_sprite_stretched(spr_GUI,0, xpos, bottom - 64,80*2,32*2);
            //draw_sprite(asset_get_index("spr_GUI_" + string(i+1)), 0,xpos+!!!, bottom - 64); !!!!!!!!!!!! add coloured gems here
            draw_sprite_stretched(spr_Life,global.Player[i,2], xpos + 128, bottom - 64,16*2,16*2);
            draw_sprite_stretched(spr_PU,global.Player[i,0].hold, xpos + 128, bottom - 32,16*2,16*2);
            draw_sprite_stretched(spr_Wicon, global.Player[i,0].Wep_index, xpos, bottom - 64,32*2,16*2)
            draw_sprite_stretched(spr_GUIFocus,0,xpos + global.Player[i, 0].GUIslot*32, bottom-32,16*2,16*2);
            for (var i2= 0; i2 &lt; 4; i2++)
            {
                draw_sprite_stretched(spr_PU,global.Slot[i2+ i*4], xpos + 32*i2,bottom - 32,16*2,16*2);
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI

var h_move = gamepad_axis_value(0 , gp_axislh);
var v_move = gamepad_axis_value(0 , gp_axislv);



var dirx = h_move * 5;
var diry = v_move * 5;
var speedo = abs(dirx) + abs(diry)
draw_text(10,40,"speed: " + string(speedo));



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
