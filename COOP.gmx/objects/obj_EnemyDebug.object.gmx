<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>cntrl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Parent = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// this will draw the path and vision range of the enemy, works better with fiew enemies
if global.Debug = true
{
if Parent !=-1
{
if instance_exists(Parent)
{
draw_set_alpha(0.5);
if Parent.Alert = 0
{
    draw_set_color(c_green);
    draw_circle(Parent.x,Parent.Centery,Parent.Not_Alert_Range,1);
    draw_set_alpha(0.08);
    draw_circle(Parent.x,Parent.Centery,Parent.Not_Alert_Range,0);
    draw_set_color(c_red);
}
else
{
    draw_set_circle_precision(64);
    draw_set_color(c_red);
    draw_circle(Parent.x,Parent.Centery,Parent.Alert_Range,1);
    draw_circle(Parent.x,Parent.Centery,Parent.Not_Alert_Range,1);
    draw_circle(Parent.x,Parent.Centery,Parent.Attack_Range,1);
    draw_set_alpha(0.06);
    draw_circle(Parent.x,Parent.Centery,Parent.Not_Alert_Range,0);
    draw_set_alpha(0.04);
    draw_circle(Parent.x,Parent.Centery,Parent.Alert_Range,0);
    draw_set_alpha(1);
    draw_set_color(c_black);
    draw_text(Parent.x - 20,Parent.bbox_top-80,"facing =" + string(Parent.facing));
    draw_line_width(Parent.x,Parent.Centery,Parent.Targetx,Parent.Targety,1);
}
if Parent.NodeCount !=0 and Parent.Alert = 1
{
draw_set_alpha(0.85);
for(i = Parent.NodeCount; i &gt; 0; i--)
{
if Parent.Node[i] &lt; obj_Pathfinder.Hcells
{var y1 = 0;}
else
{ var y1 = floor(Parent.Node[i]/obj_Pathfinder.Hcells);}// the row number of the cell
var x1 = Parent.Node[i] - (y1 * obj_Pathfinder.Hcells);
if Parent.Node[i-1] &lt; obj_Pathfinder.Hcells
{var y2 = 0;}
else
{ var y2 = floor(Parent.Node[i-1]/obj_Pathfinder.Hcells);}// the row number of the cell
var x2 = Parent.Node[i-1] - (y2 * obj_Pathfinder.Hcells);
draw_set_color(make_color_hsv(i*30 mod 255,255,255));
draw_line_width(x1*32+16,y1*32+16,x2*32+16,y2*32+16,1);
draw_set_color(make_color_hsv((i+2)*30 mod 255,200,200));
draw_rectangle(x1*32+16-2,y1*32+16-2,x1*32+16+2,y1*32+16+2,0);
}
draw_circle(x2*32+16,y2*32+16,3,0);
}
}
draw_set_alpha(1);
}
else 
instance_destroy();
}
else {instance_destroy();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
